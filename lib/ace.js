/*global window, process, global*/

;(function(run) {
  var isNodejs = typeof module !== "undefined" && module.require;
  var exports = isNodejs ? module.exports : window.paredit;
  run(exports);
})(function(exports) {

  exports.ace = {

    undoStackSize: function(ed) {
      return ed.session.getUndoManager().$undoStack.length;
    },

    mergeLast2Undos: function(ed) {
      var uMgr = ed.session.getUndoManager()
      if (uMgr.$undoStack.length >= 2) {
        uMgr.dirtyCounter--;
        var u1 = uMgr.$undoStack.pop();
        var u2 = uMgr.$undoStack[uMgr.$undoStack.length-1];
        var deltas = u1.reduce(function(delta, undo) {
          return delta.concat(undo.deltas); }, []);
        u2.last().deltas = u2.last().deltas.concat(deltas);
      }
    },

    indent: function(ed, from, to) {
      var ast = ed.session.$ast;
      if (!ast) return;
      if (typeof from !== 'number')
        from = ed.session.doc.positionToIndex(ed.getSelectionRange().start);
      if (typeof to !== 'number')
        to = ed.session.doc.positionToIndex(ed.getSelectionRange().end);
      var indent = exports.editor.indentRange(ast, ed.getValue(), from, to);
      exports.ace.applyChanges(ed, indent.changes,
        indent.changes.newIndex, false);
    },

    applyChanges: function(ed, changes, newIndex, indent) {
      // ed: ace editor instance
      // changes:  alist of insert/remove instructions generated by
      //           paredit.editor
      // newIndex: where to put the cursor after applying the changes
      if (!changes || !changes.length) return;

      var nUndos = exports.ace.undoStackSize(ed);
      changes.forEach(function(ea) {
        var type = ea[0];
        if (type === 'insert') {
          ed.session.insert(
            ed.session.doc.indexToPosition(ea[1]), ea[2]);
        } else if (type === 'remove') {
          ed.session.remove({
            start: ed.session.doc.indexToPosition(ea[1]),
            end: ed.session.doc.indexToPosition(ea[1]+ea[2])
          });
        }
      });

      if (newIndex)
        ed.moveCursorToPosition(
          ed.session.doc.indexToPosition(newIndex));

      if (!indent) ed.session.markUndoGroup();
      else {
        ed.session.$ast = paredit.parse(ed.getValue(), {addSourceForLeafs: true});
        var indentStart = typeof indent === "object" ?
              indent.start : changes[0][1],
            indentEnd = typeof indent === "object" ?
              indent.end : changes[changes.length-1][1];
        exports.ace.indent(ed, indentStart, indentEnd)
        if (exports.ace.undoStackSize(ed) - nUndos >= 2)
          exports.ace.mergeLast2Undos(ed);
      }
    }

  }
});
